library(raster)
# Load the DEM raster
dem <- raster("data/dem.tif")
# Load the DEM raster
dem <- raster("data/dem.tif")
# Calculate slope and aspect rasters
slope <- terrain(dem, opt = "slope")
aspect <- terrain(dem, opt = "aspect")
# Plot the slope raster
plot(slope, main = "Slope")
# Plot the aspect raster
plot(aspect, main = "Aspect")
# Load the landslide shapefile
landslides <- shapefile("data/landslides.shp")
# Extract DEM values within the landslide polygons
dem_landslides <- extract(dem, landslides)
# Create a histogram of the extracted DEM values and the whole DEM
hist(dem, breaks = "FD", main = "DEM Histogram")
hist(dem_landslides, breaks = "FD", main = "Landslide DEM Histogram")
library(raster)
# Load the DEM raster
dem <- raster("dem.tif")
# Convert the list to a vector
dem_landslides <- unlist(dem_landslides)
# Create a histogram of the extracted DEM values and the whole DEM
hist(dem, breaks = "FD", main = "DEM Histogram")
hist(dem_landslides, breaks = "FD", main = "Landslide DEM Histogram")
library(raster)
library(ggplot2)
# Create a data frame with the DEM values
df_dem <- data.frame(value = getValues(dem), type = "DEM")
df_landslides <- data.frame(value = dem_landslides, type = "Landslides")
# Combine the data frames
df <- rbind(df_dem, df_landslides)
# Create a ggplot with two histograms
ggplot(df, aes(x = value, fill = type)) +
geom_histogram(alpha = 0.5, bins = "FD") +
labs(title = "DEM and Landslide DEM Histograms", x = "Elevation", y = "Count") +
theme_bw()
# Combine the data frames
df <- rbind(df_dem, df_landslides)
# Remove rows with NA values
df <- na.omit(df)
# Create a ggplot with two histograms
ggplot(df, aes(x = value, fill = type)) +
geom_histogram(alpha = 0.5, bins = "FD") +
labs(title = "DEM and Landslide DEM Histograms", x = "Elevation", y = "Count") +
theme_bw()
View(df)
View(df_dem)
# Replace NA values with -9999
dem_landslides_raster[is.na(dem_landslides_raster)] <- -9999
# Extract DEM values within the landslide polygons
dem_landslides <- extract(dem, landslides)
# Convert the list to a raster
dem_landslides_raster <- raster(dem_landslides)
View(dem_landslides)
# Create a ggplot with two histograms
ggplot(df, aes(x = value, fill = type)) +
geom_histogram(alpha = 0.5, bins = 30) +
labs(title = "DEM and Landslide DEM Histograms", x = "Elevation", y = "Count") +
theme_bw()
ggplot(df, aes(x = value, fill = type)) +
geom_histogram(alpha = 0.5, binwidth = 10) +
labs(title = "DEM and Landslide DEM Histograms", x = "Elevation", y = "Count") +
theme_bw()
# Calculate the mean elevation for each dataset
mean_dem <- mean(getValues(dem))
mean_landslides <- mean(getValues(raster(dem_landslides)))
# Load the landslide shapefile
landslides <- shapefile("landslides.shp")
# Extract DEM values within the landslide polygons
dem_landslides <- extract(dem, landslides)
# Convert the list of extracted values to a vector
values_landslides <- unlist(dem_landslides)
# Calculate the mean elevation for each dataset
mean_dem <- mean(getValues(dem))
mean_landslides <- mean(values_landslides)
# Perform a two-sample t-test
t.test(getValues(dem), values_landslides, alternative = "two.sided", var.equal = FALSE)
# Extract the maximum elevation value within each landslide polygon
max_values <- sapply(extract(dem, landslides, fun = max), max)
# Plot a histogram of the maximum elevation values
ggplot(data = data.frame(max_values), aes(x = max_values)) +
geom_histogram(binwidth = 10, fill = "dodgerblue", color = "black") +
labs(title = "Maximum Elevation Values within Landslide Polygons",
x = "Maximum Elevation Value", y = "Count") +
theme_bw()
# Extract the maximum elevation value and coordinates within each landslide polygon
max_values <- extract(dem, landslides, fun = max, sp = TRUE)
# Load the DEM raster
dem <- raster("dem.tif")
# Load the landslide shapefile
landslides <- readOGR("landslides.shp")
library(rgdal)
library(sp)
# Load the landslide shapefile
landslides <- readOGR("landslides.shp")
# Extract the maximum elevation value and coordinates within each landslide polygon
max_values <- extract(dem, landslides, fun = max, sp = TRUE)
coords <- max_values[,1:2]
elevations <- max_values[,3]
# Create a new spatial points data frame with the maximum elevation values and coordinates
points_df <- SpatialPointsDataFrame(coords, data.frame(elevation = elevations))
# Plot the points on top of the DEM raster
plot(dem)
points(points_df, pch = 19, col = "red")
# Plot the slope raster
plot(slope, main = "Slope")
# Plot the aspect raster
plot(aspect, main = "Aspect")
library(raster)
# Load the DEM raster
dem <- raster("dem.tif")
# Calculate slope and aspect rasters
slope <- terrain(dem, opt = "slope", unit = "degrees")
aspect <- terrain(dem, opt = "aspect", unit = "degrees")
# Plot the slope and aspect rasters
par(mfrow = c(1, 2))
plot(slope, main = "Slope (degrees)")
plot(aspect, main = "Aspect (degrees)")
# Save the slope and aspect rasters as GeoTIFF files
writeRaster(slope, "slope.tif", format = "GTiff", overwrite = TRUE)
writeRaster(aspect, "aspect.tif", format = "GTiff", overwrite = TRUE)
library(raster)
library(ggplot2)
# Load the DEM raster
dem <- raster("dem.tif")
# Load the landslide shapefile
landslides <- shapefile("landslides.shp")
# Extract DEM values within the landslide polygons
dem_landslides <- extract(dem, landslides)
# Convert the list to a vector
dem_landslides <- unlist(dem_landslides)
# Create a data frame with the DEM values
df_dem <- data.frame(value = getValues(dem), type = "DEM")
df_landslides <- data.frame(value = dem_landslides, type = "Landslides")
# Combine the data frames
df <- rbind(df_dem, df_landslides)
# Create a ggplot with two histograms
ggplot(df, aes(x = value, fill = type)) +
geom_histogram(alpha = 0.5, bins = 30) +
labs(title = "DEM and Landslide DEM Histograms", x = "Elevation", y = "Count") +
theme_bw()
# Create a histogram of the extracted DEM values and the whole DEM
hist(dem, breaks = "FD", main = "DEM Histogram")
hist(dem_landslides, breaks = "FD", main = "Landslide DEM Histogram")
# Create a histogram of the extracted DEM values and the whole DEM
hist(dem, breaks = "FD", main = "DEM Histogram")
hist(dem_landslides, breaks = "FD", main = "Landslide DEM Histogram")
